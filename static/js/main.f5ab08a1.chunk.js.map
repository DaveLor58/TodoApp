{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","todos","setTodos","setInputText","setStatus","className","type","placeholder","value","onChange","e","console","log","target","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","elem","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5ab08a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/* component that takes care of what to do when user enters an input in the input bar.\r\n * each time a new todo item is created, the form will assign props in that todo item.  \r\n * Additionally, there is a dropdown bar that will allow users to see categories of completed, incomplete, and all todos\r\n */\r\nconst Form = ({ inputText, todos, setTodos, setInputText, setStatus }) => {\r\n    // js code and functions here \r\n    // function inputTextHandler takes in the user input as a text value\r\n    // then submitTodoHandler will take care of creating todo item\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    // once user enters in input, the submitTodoHandler will be called \r\n    // once '+' button is pressed. This function takes props from todos, change values\r\n    // and give a unique id for each todo item.\r\n    const submitTodoHandler = (e) => {\r\n        // stop the page from loading to default\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, \r\n            {   text: inputText, \r\n                completed: false, \r\n                id: Math.random() * 1000\r\n            },\r\n        ]);\r\n        setInputText(\"\"); // refresh the input bar after user enters a todo item\r\n    };\r\n    // change status of todo item once it changes state\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    };\r\n\r\n    return(\r\n        <form>\r\n            <input \r\n                className=\"todo-input\" \r\n                type=\"text\" \r\n                placeholder=\"Type your new todo here\"\r\n                value={inputText}\r\n                onChange={inputTextHandler}/>\r\n            <button \r\n                onClick={submitTodoHandler} \r\n                className=\"todo-button\" \r\n                type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                <option value=\"all\">All</option>\r\n                <option value=\"completed\">Completed</option>\r\n                <option value=\"incomplete\">Incomplete</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n/* This component handles all of the state changes that \r\n * occurs whenever the user modifies the listed todo items. \r\n * Depending on what the user clicked on, the corresponding function \r\n * will update the todo array or update the property of each items status \r\n */\r\nconst Todo = ({setTodos, todos, todo, text}) => {\r\n    // Events\r\n    // delete handler will filter out items that have been removed \r\n    // due to user pressing trash button\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(elem => elem.id !== todo.id))\r\n    };\r\n    // completeHandler will set todo array with items that have been checked by the user \r\n    // each item's completed property will toggle to correctly assign values when each \r\n    // completed/incomplete item have been filtered \r\n    const completeHandler = () => {\r\n            setTodos(todos.map(item => {\r\n                if(item.id === todo.id){\r\n                    return {\r\n                        ...item, completed: !item.completed \r\n                    }         \r\n                }\r\n                return item;\r\n            }\r\n            )\r\n        );\r\n    };\r\n    return(\r\n            <div className=\"todo\">\r\n                <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n                <button  onClick={completeHandler} className=\"complete-btn\"> \r\n                    <i className=\"fas fa-check\"></i>\r\n                </button>\r\n                <button onClick={deleteHandler} className=\"trash-btn\"> \r\n                    <i className=\"fas fa-trash\"></i>\r\n                </button>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n// import components \r\nimport Todo from './Todo';\r\n/* This component returns a mapped todo list that \r\n * contains every todo item generated by user input. \r\n * filteredTodos is used to properly display the state of each item \r\n * whenever user toggles the select button.\r\n */\r\nconst TodoList = ({ filteredTodos, setTodos, todos }) => {\r\n    return(\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                { // map out every todo items, hence displays all todos\r\n                 filteredTodos.map(todo => (\r\n                    <Todo \r\n                        setTodos={setTodos} \r\n                        todos={todos}\r\n                        key={todo.id} // add a key to each todo item\r\n                        todo={todo}\r\n                        text={todo.text}\r\n                    />\r\n                ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// importing components \nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\n/* Function that generates the entire todo list and uses useState and useEffect to track \n * changes in state and update accordingly, returns components of the todo project as well\n * as creating a local storage to save todo data.\n */\nconst App = () => {\n  // every state changes \n  const [inputText, setInputText] = useState(\"\"); // inputText initialized to empty str\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  // RUNS during the beginning of the app \n  useEffect(() => {\n    getLocalTodos();\n  },[]);\n  // use effect will execute the filter function \n  // everytime a user enters a new todo item or when item status\n  // is selected i.e. completed,uncompleted,all\n  useEffect(() => {\n     // call to filter completed todos from uncompleted\n    filterHandler(); \n    saveLocalTodos();\n  }, [todos,status]); \n\n  // filterHandler is a function that will change the screen of the app depending \n  // on whether the user selects completed, incomplete, or all todo items\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'incomplete':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n        // otherwise, show all of the todo items\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  //function that saves to local storage\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  // function that checks if there are items or if there is none\n  // gets called once by useEffect\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      // set to empty array\n      localStorage.setItem('todos', JSON.stringify([]));\n    }\n    else{\n      // if todo exists, then parse and setTodos\n      let todoLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todoLocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>Dave's Todo List</h1>\n      </header>\n        <Form \n          inputText={inputText} \n          todos={todos} \n          setTodos={setTodos} \n          setInputText={setInputText}\n          setStatus={setStatus}\n        />\n        <TodoList \n          filteredTodos={filteredTodos} \n          setTodos={setTodos} \n          todos={todos} \n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}